import freemarker.template.Template
import freemarker.template.TemplateExceptionHandler

import java.nio.file.Files
import java.nio.file.Paths
import java.util.Map.Entry

/**
 * The initial build.gradle file
 * This file takes care of templating the necessary files, followed by deleting itself and creating a new build.gradle
 */


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.freemarker:freemarker:2.3.23'
    }
}

task initB2 << {

    def console = System.console()
    if (!console) {
        logger.error("Can't get console!")
        return
    }

    def sep = File.separator

    // Load defaults for the questions, if they exist
    // The default answers are stored in the users home directory under a file named `.atd-b2-stub-defaults.properties`
    def Map<String, Object> defaults = new HashMap<>()

    def defaultsFile = Paths.get(System.getProperty('user.home') + sep + '.atd-b2-stub-defaults.properties')
    if (Files.exists(defaultsFile)) {
        Properties defaultProperties = new Properties();
        defaultProperties.load(new ByteArrayInputStream(Files.readAllBytes(defaultsFile)))
        for (final Entry<Object, Object> entry : defaultProperties.entrySet()) {
            defaults.put(entry.getKey().toString(), entry.getValue())
        }
    }

    // Notify the user that default values can be used
    if (!defaults.isEmpty()) {
        println('Defaults found for generating building block')
    }


    // Build a configuration object to store the Freemarker template and substitution values
    def Map<String, Object> root = new HashMap<>()

    // Ask the real questions
    root.put('username', System.getProperty('user.name'))
    root.put('vendorId', askStrictQuestion('\nWhat is your Vendor Id (e.g. usq, unsw, qut, swin, etc)?', defaults.get('vendorId')))
    root.put('vendorName', askQuestion('What is your Vendor Name (e.g. University of Antarctica)?', defaults.get('vendorName')))
    root.put('vendorUrl', askStrictQuestion('What is your Vendor Website (e.g. http://www.myu.edu.au/)?', defaults.get('vendorUrl')))
    root.put('b2Handle', askStrictQuestion('What is your B2 Handle (e.g. jshack, autosignon, etc)?', null))
    root.put('b2Name', askQuestion('What is your B2 Name (e.g. Student View)?', null))
    root.put('basePackage', askStrictQuestion('What is the base java package of your project? (e.g. au.edu.uni.myproject) ?', null))

    if (defaults.isEmpty()) {
        println('Saving these answers as default for next time')
        Properties properties = new Properties();
        properties.putAll(root)
        OutputStream out = new FileOutputStream(new File(System.getProperty('user.home')  + sep +  '/.atd-b2-stub-defaults.properties'))
        properties.store(out, 'Default values when creating blackboard building blocks')
    }

    root.put('useCourseEventListener', askYNQuestion('Do you want to use the course event listener?'))
    root.put('useSchema', askYNQuestion('Do you want to use the Schema.xml?'))
    // This might be needed in the future
//    def useSpringDi = System.console().readLine 'Do you want to use Rendering Hooks (Y, N)?'

    // Also generate some more necessary templates
    root.put('b2DbHandle', root.get('b2Handle').toString().replaceAll("-", "_"))
    root.put('fullB2NameDb', root.get('vendorId') + '_' + root.get('b2DbHandle'))

    println "Initialising Building Block $root.vendorId-$root.b2Handle"

    def freemarker.template.Configuration cfg = initFreemarker();

    def packagePath = root.get('basePackage').toString().replace(".", File.separator)
    def workingPath = new File('.').absolutePath

    // we want files that fall under these patterns to be ignored
    def ignoreFiles = ['.git', '.idea', 'build' + sep, 'classes' + sep, 'gradlew', 'gradle' + sep, 'lib' + sep, '.gradle' + sep, '.iml', '.md']

    new File('.').eachFileRecurse { file ->

        // create a nicer path that Freemarker can understand
        def filePath = '.' + file.absolutePath.replace(workingPath, '')

        // check to see if the current file should be ignored
        for (String ignored : ignoreFiles) {
            if (filePath.contains(ignored)) {
                return
            }
        }

        // process the file!
        if (!file.name.startsWith('.') && file.isFile()) {
            processFreemarkerFile(cfg, root, filePath, filePath.replace('edu' + sep + 'myinst', packagePath))
        }

    }

    // get rid of the old template dir
    new File("src/main/java/edu".split('/').join(sep)).deleteDir();

    // get rid of this file
    Files.delete(Paths.get('build.gradle'))

    // make the template build.gradle the real one
    Files.move(Paths.get('build.gradle.ftl'), Paths.get('build.gradle'))

    // make sure nobody pushes back upstream to the stub
    def command = """git remote rm origin"""
    def proc = command.execute()
    proc.waitFor()

    println proc.err.text
    println proc.in.text
}

/**
 * Ask a yes/no question, returning a true/false value respectively. Anything other than 'Y' or 'y' returns false.
 * @param question
 * @return result from the question
 */
boolean askYNQuestion(String question) {
    return System.console().readLine(question + ' (Y/N) ').trim().toLowerCase() == 'y'
}

/**
 * Ask a question returning an answer. If a default value is provided (not null), the user does not have to provide an
 * answer and may just press enter.
 * @param question
 * @param defaultValue
 * @return A string containing the answer to the question
 */
String askQuestion(String question, Object defaultValue) {
    if (defaultValue != null) {
        String result =  System.console().readLine(question + ' ' + '[' + defaultValue + '] ').trim()
        if (result.isEmpty()) {
            return defaultValue;
        }
        return result
    }
    return System.console().readLine(question + ' ').trim()
}

/**
 * An answer to strict question may not contain spaces or be empty
 * @see #askQuestion
 * @param question
 * @param defaultValue
 * @return A string containing the answer to the question
 */
String askStrictQuestion(String question, Object defaultValue) {
    question = question + ' (No spaces) '
    String answer = askQuestion(question, defaultValue)
    while (answer.contains(' ') || answer.isEmpty()) {
        answer = askQuestion(question, defaultValue)
    }
    return answer
}

/**
 *
 * @param cfg A Freemaker configuration object
 * @param root A map containing Freemarker template strings -> substitution values
 * @param inputFilepath
 * @param outputFilepath
 */
void processFreemarkerFile(freemarker.template.Configuration cfg, Map<String, Object> root, String inputFilepath, String outputFilepath) {

    Template template = cfg.getTemplate(inputFilepath)

    File outputFile = new File(outputFilepath)
    if (!outputFile.exists()) {
        def path = outputFile.absolutePath.split(File.separator)
        path = path[0..path.size()-2]
        path = path.join(File.separator)
        new File(path).mkdirs()
    }

    FileWriter out = new FileWriter(new File(outputFilepath))
    template.process(root, out)
    out.close();

}

/**
 * Init a configuration object for freemarker
 * See {@linktourl http://freemarker.org/docs/pgui_quickstart_createconfiguration.html}
 */
def initFreemarker() {

    freemarker.template.Configuration cfg = new freemarker.template.Configuration(freemarker.template.Configuration.VERSION_2_3_23)
    cfg.setDirectoryForTemplateLoading(new File('.'))
    cfg.setDefaultEncoding('UTF-8')
    cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER)

    // Don't log exceptions inside FreeMarker that it will throw at you anyway
    cfg.setLogTemplateExceptions(false);

    return cfg;

}