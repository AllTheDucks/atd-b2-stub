import java.nio.file.Files
import java.nio.file.Paths

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'wiley' at '2/11/14 9:16 PM' with Gradle 1.10
 *
 */

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.7
targetCompatibility = 1.7

task wrapper(type: Wrapper) {
    gradleVersion = "2.6"
}

if (isBuildingBlock()) {
    version = getB2Version()
}

repositories {
    mavenCentral()
    maven {
        url "https://bbprepo.blackboard.com/content/repositories/releases/"
    }
}

configurations {
    b2deploy
}

dependencies {
    b2deploy 'org.oscelot:b2deploy-task:0.1.0'

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jul-to-slf4j:1.7.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'

    compile 'com.thoughtworks.xstream:xstream:1.4.7'
    compile 'net.sourceforge.stripes:stripes:1.5.7'
    compile 'org.springframework:spring-beans:3.2.5.RELEASE'
    compile 'org.springframework:spring-web:3.2.5.RELEASE'
    compile files('lib/bb-stripes-utils-1.1.0.jar')
    compile files('lib/b2-config-utils-1.0.3.jar')

    providedCompile 'javax.servlet:servlet-api:2.5'
    providedCompile 'jstl:jstl:1.2'
    providedCompile 'blackboard.platform:bb-platform:9.1.201404.160205'
    providedCompile 'blackboard.platform:bb-taglibs:9.1.201404.160205'
    providedCompile 'com.google.guava:guava:16.0'

    /* the bb-cms-admin is needed for the CourseEventHandler Class, as referenced in bb-manifest.xml */
    providedCompile 'blackboard.platform:bb-cms-admin:9.1.201404.160205'

    testCompile "junit:junit:4.11"
}

ant.taskdef(name: 'b2deploy', classname: 'org.oscelot.ant.B2DeployTask', classpath: configurations.b2deploy.asPath)

task deployb2(dependsOn: 'war') << {
    println "Deploying \"" + war.archivePath + "\""
    ant.b2deploy(localfilepath: war.archivePath,
            host: 'localhost:9876',
            clean: 'true',
            courseorgavailable: 'true')
}


String getB2Version() {
    File mfFile = new File(file(webAppDir), 'WEB-INF/bb-manifest.xml');
    def manifest = new XmlSlurper().parse(mfFile);
    return manifest.plugin.version['@value'];
}

boolean isBuildingBlock() {
    File mfFile = new File(file(webAppDir), 'WEB-INF/bb-manifest.xml');
    return mfFile.exists();
}


task initB2 << {

    def console = System.console()
    if (!console) {
        logger.error("Can't get console!")
        return
    }
    def vendorId = System.console().readLine '\nWhat is your Vendor Id (e.g. usq, unsw, qut, swin, etc) ? '
    def vendorName = System.console().readLine 'What is your Vendor Name (e.g. University of Antarctica) ? '
    def vendorUrl = System.console().readLine 'What is your Vendor Website (e.g. http://www.myu.edu.au/) ? '
    def b2Handle = System.console().readLine 'What is your B2 Handle (e.g. jshack, autosignon, etc) ? '
    def b2Name = System.console().readLine 'What is your B2 Name (e.g. Student View) ? '
    def basePackage = System.console().readLine 'What is the base java package of your project? (e.g. au.edu.uni.myproject) ? '
//    def useStripes = System.console().readLine 'Do you want to use the Schema.xml (Y, N)?'
//    def useSpringDi = System.console().readLine 'Do you want to use Rendering Hooks (Y, N)?'
//    def useSpringDi = System.console().readLine 'Do you want to use Course Event Listeners (Y, N)?'
//    def useJersey = System.console().readLine 'Do you want to use Jersey Web Services (Y, N)?'

    println "Initialising Building Block $vendorId-$b2Handle"

    def b2DbHandle = b2Handle.replaceAll("-", "_")
    def fullB2NameDb = vendorId + "_" + b2DbHandle

    searchAndReplace("src/main/java/edu/myinst/model/Example.java", "myu_stub", fullB2NameDb)
    searchAndReplace("src/main/webapp/schema/instance/schema.xml", "myu_stub", fullB2NameDb)
    searchAndReplace("src/main/webapp/schema/instance/stored_procedures.db-mssql/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)
    searchAndReplace("src/main/webapp/schema/instance/stored_procedures.db-oracle/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)
    searchAndReplace("src/main/webapp/schema/instance/stored_procedures.db-pgsql/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)
    searchAndReplaceFilename("src/main/webapp/schema/instance/stored_procedures.db-mssql/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)
    searchAndReplaceFilename("src/main/webapp/schema/instance/stored_procedures.db-oracle/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)
    searchAndReplaceFilename("src/main/webapp/schema/instance/stored_procedures.db-pgsql/myu_stub_example_proc.sql", "myu_stub", fullB2NameDb)

    // Fix packages in java files
    def packagePath = basePackage.replace(".", File.separator)
    def destPackageDir = new File("src/main/java", packagePath)
    def srcPackageDir = new File("src/main/java/edu/myinst")
    destPackageDir.mkdirs();


    for (srcDir in srcPackageDir.listFiles()) {
        if (srcDir.isDirectory()) {
            def destDir = new File(destPackageDir, srcDir.getName())
            destDir.mkdir()
            for (srcFile in srcDir.listFiles()) {
                new File(destDir, srcFile.getName()).withWriter { w ->
                    srcFile.eachLine { line ->
                        w << line.replaceAll( "edu.myinst", basePackage)
                        w << "\n"
                    }
                }
            }
        }
    }

    new File("src/main/java/edu").deleteDir();

    // Fix up bb-manifest.xml
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "stub", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "My University", vendorName)
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "http://www.myu.edu/", vendorUrl)
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "Joe Bloggs", System.getProperty("user.name"))
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "helloworld", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/bb-manifest.xml", "myapp", "${b2Handle}-app")



    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "My Cool Building Block", b2Name)
    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "Hello World", b2Name)
    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "helloworld", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "myapp", "${b2Handle}-app")
    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties", "stub", b2Handle)

    searchAndReplace("src/main/webapp/WEB-INF/jsp/tool.jsp", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/jsp/tool.jsp", "helloworld", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/jsp/tool.jsp", "myapp", "${b2Handle}-app")
    searchAndReplace("src/main/webapp/WEB-INF/jsp/tool.jsp", "edu.myinst", basePackage)

    searchAndReplace("src/main/webapp/WEB-INF/jsp/config.jsp", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/jsp/config.jsp", "helloworld", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/jsp/config.jsp", "myapp", "${b2Handle}-app")
    searchAndReplace("src/main/webapp/WEB-INF/jsp/config.jsp", "edu.myinst", basePackage)


    searchAndReplace("settings.gradle", "myu", vendorId)
    searchAndReplace("settings.gradle", "stub", b2Handle)

    searchAndReplace("src/main/webapp/WEB-INF/web.xml", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/web.xml", "stub", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/web.xml", "edu.myinst", basePackage)


    searchAndReplace("src/main/webapp/WEB-INF/applicationContext.xml", "myu", vendorId)
    searchAndReplace("src/main/webapp/WEB-INF/applicationContext.xml", "stub", b2Handle)
    searchAndReplace("src/main/webapp/WEB-INF/applicationContext.xml", "edu.myinst", basePackage)

    def command = """git remote rm origin"""
    def proc = command.execute()
    proc.waitFor()

    println "${proc.err.text}"
    println "${proc.in.text}"
}

def searchAndReplace(String targetFilePath, String search, String replace) {
    new File("${targetFilePath}.tmp").withWriter { w ->
        new File(targetFilePath).eachLine { line ->
            w << line.replaceAll( search, replace)
            w << "\n"
        }
    }
    Files.delete(Paths.get(targetFilePath))
    Files.move(Paths.get("${targetFilePath}.tmp"),
            Paths.get(targetFilePath));
}

def searchAndReplaceFilename(String targetFilePath, String search, String replace) {
    def file = new File(targetFilePath)
    def oldName = file.name
    def newName = file.name.replaceAll(search, replace)
    if(oldName != newName) {
        file.renameTo(new File(file.parentFile, newName));
    }
}
