import freemarker.template.Template
import freemarker.template.TemplateExceptionHandler

import java.nio.file.Files
import java.nio.file.Paths

/**
 * The initial build.gradle file
 * This file takes care of templating the necessary files, followed by deleting itself and creating a new build.gradle
 */


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.freemarker:freemarker:2.3.23'
    }
}

task initB2 << {

    def console = System.console()
    if (!console) {
        logger.error("Can't get console!")
        return
    }

    def Map<String, Object> root = new HashMap<>();

    root.put('username', System.getProperty('user.name'))
    root.put('vendorId', askStrictQuestion('\nWhat is your Vendor Id (e.g. usq, unsw, qut, swin, etc)?'))
    root.put('vendorName', askQuestion('What is your Vendor Name (e.g. University of Antarctica)?'))
    root.put('vendorUrl', askStrictQuestion('What is your Vendor Website (e.g. http://www.myu.edu.au/)?'))
    root.put('b2Handle', askStrictQuestion('What is your B2 Handle (e.g. jshack, autosignon, etc)?'))
    root.put('b2Name', askQuestion('What is your B2 Name (e.g. Student View)?'))
    root.put('basePackage', askStrictQuestion('What is the base java package of your project? (e.g. au.edu.uni.myproject) ?'))
    root.put('useCourseEventListener', askYNQuestion('Do you want to use the course event listener?'))
    root.put('useSchema', askYNQuestion('Do you want to use the Schema.xml?'))
    root.put('b2DbHandle', root.get('b2Handle').toString().replaceAll("-", "_"))
    root.put('fullB2NameDb', root.get('vendorId') + '_' + root.get('b2DbHandle'))
//    def useSpringDi = System.console().readLine 'Do you want to use Rendering Hooks (Y, N)?'

    println "Initialising Building Block $root.vendorId-$root.b2Handle"

    def freemarker.template.Configuration cfg = initFreemarker();

    processFreemarkerFile(cfg, root, "settings.gradle")

    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/bb-manifest.xml")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/bundles/bb-manifest-en_GB.properties")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/applicationContext.xml")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/web.xml")

    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/stripes/ConfigAction.java")
    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/stripes/ToolAction.java")
    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/dao/ExampleDao.java")
    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/config/Configuration.java")
    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/extensions/CourseEventHandler.java")
    processFreemarkerFile(cfg, root, "./src/main/java/edu/myinst/model/Example.java")

    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/jsp/config.jsp")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/jsp/tool.jsp")

    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/schema/instance/schema.xml")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-mssql/myu_stub_example_proc.sql")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-oracle/myu_stub_example_proc.sql")
    processFreemarkerFile(cfg, root, "./src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-pgsql/myu_stub_example_proc.sql")

    processFreemarkerFile(cfg, root, "./build.gradle.ftl")

    searchAndReplaceFilename("src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-mssql/myu_stub_example_proc.sql", "myu_stub", root.get('fullB2NameDb').toString())
    searchAndReplaceFilename("src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-oracle/myu_stub_example_proc.sql", "myu_stub", root.get('fullB2NameDb').toString())
    searchAndReplaceFilename("src/main/webapp/WEB-INF/schema/instance/stored_procedures.db-pgsql/myu_stub_example_proc.sql", "myu_stub", root.get('fullB2NameDb').toString())

    // Fix packages in java files
    def packagePath = root.get('basePackage').toString().replace(".", File.separator)
    def destPackageDir = new File("src/main/java", packagePath)
    def srcPackageDir = new File("src/main/java/edu/myinst")
    destPackageDir.mkdirs();

    for (srcDir in srcPackageDir.listFiles()) {
        if (srcDir.isDirectory()) {
            def destDir = new File(destPackageDir, srcDir.getName())
            destDir.mkdir()
            for (srcFile in srcDir.listFiles()) {
                new File(destDir, srcFile.getName()).withWriter { w ->
                    srcFile.eachLine { line ->
                        w << line.replaceAll( "edu.myinst", root.get('basePackage').toString())
                        w << "\n"
                    }
                }
            }
        }
    }

    new File("src/main/java/edu").deleteDir();

    Files.delete(Paths.get('build.gradle'))
    Files.move(Paths.get('build.gradle.ftl'), Paths.get('build.gradle'))

    def command = """git remote rm origin"""
    def proc = command.execute()
    proc.waitFor()

    println "${proc.err.text}"
    println "${proc.in.text}"
}

boolean askYNQuestion(String question) {
    return System.console().readLine(question + ' (Y/N) ').trim().toLowerCase() == 'y'
}

String askQuestion(String question) {
    return System.console().readLine(question + ' ').trim()
}

String askStrictQuestion(String question) {
    String answer = askQuestion(question)
    while (answer.contains(' ')) {
        System.console().printf('Spaces are not allowed for this question.')
        answer = askQuestion(question)
    }
    return answer
}


def processFreemarkerFile(freemarker.template.Configuration cfg, Map<String, Object> root, String filepath) {

    Template template = cfg.getTemplate(filepath)
    FileWriter out = new FileWriter(new File(filepath))
    template.process(root, out)
    out.close()

}

def initFreemarker() {

    /**
     * Init a configuration object for freemarker
     * http://freemarker.org/docs/pgui_quickstart_createconfiguration.html
     */
    freemarker.template.Configuration cfg = new freemarker.template.Configuration(freemarker.template.Configuration.VERSION_2_3_23)
    cfg.setDirectoryForTemplateLoading(new File('.'))
    cfg.setDefaultEncoding('UTF-8')
    cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER)

    // Don't log exceptions inside FreeMarker that it will thrown at you anyway
    cfg.setLogTemplateExceptions(false);

    return cfg;

}

def searchAndReplaceFilename(String targetFilePath, String search, String replace) {
    def file = new File(targetFilePath)
    def oldName = file.name
    def newName = file.name.replaceAll(search, replace)
    if(oldName != newName) {
        file.renameTo(new File(file.parentFile, newName));
    }
}